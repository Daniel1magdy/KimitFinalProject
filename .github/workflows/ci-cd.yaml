# .github/workflows/ci-cd.yaml
name: CI/CD Pipeline to EKS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-2
  EKS_CLUSTER_NAME: devops-eks-cluster
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-west-2.amazonaws.com
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Check for lock files
      run: |
        echo "Checking for package-lock.json files..."
        if [[ ! -f "frontend/package-lock.json" ]]; then
          echo "❌ frontend/package-lock.json not found"
          echo "Please run 'npm install' in the frontend directory to generate it"
          exit 1
        fi
        if [[ ! -f "backend/package-lock.json" ]]; then
          echo "❌ backend/package-lock.json not found"
          echo "Please run 'npm install' in the backend directory to generate it"
          exit 1
        fi
        echo "✅ All package-lock.json files found"

    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run Frontend Tests
      working-directory: ./frontend
      run: |
        # Add your frontend tests here
        npm run test --if-present || echo "No tests found"

    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        # Add your backend tests here
        npm run test --if-present || echo "No tests found"

    - name: Lint Code
      run: |
        echo "Running linting checks..."
        # Add your linting commands here

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      id-token: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check required secrets
      run: |
        if [[ -z "${{ secrets.AWS_ACCOUNT_ID }}" ]]; then
          echo "❌ AWS_ACCOUNT_ID secret is not set"
          exit 1
        fi
        if [[ -z "${{ secrets.AWS_ROLE_ARN }}" ]]; then
          echo "❌ AWS_ROLE_ARN secret is not set"
          exit 1
        fi
        echo "✅ Required secrets are set"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: |
        aws sts get-caller-identity
        echo "✅ AWS credentials configured successfully"

    - name: Check ECR repositories exist
      run: |
        echo "Checking if ECR repositories exist..."
        
        # Check frontend repository
        if aws ecr describe-repositories --repository-names devops-project-frontend --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          echo "✅ Frontend ECR repository exists"
        else
          echo "❌ Frontend ECR repository doesn't exist. Creating..."
          aws ecr create-repository --repository-name devops-project-frontend --region ${{ env.AWS_REGION }}
        fi
        
        # Check backend repository
        if aws ecr describe-repositories --repository-names devops-project-backend --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
          echo "✅ Backend ECR repository exists"
        else
          echo "❌ Backend ECR repository doesn't exist. Creating..."
          aws ecr create-repository --repository-name devops-project-backend --region ${{ env.AWS_REGION }}
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Get commit hash
      id: get-commit-hash
      run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Get timestamp
      id: get-timestamp
      run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

    - name: Build and push Frontend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-project-frontend
        IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
      run: |
        echo "Building frontend Docker image..."
        
        # Check if Dockerfile exists
        if [[ ! -f "frontend/Dockerfile" ]]; then
          echo "❌ frontend/Dockerfile not found"
          exit 1
        fi
        
        # Check if package-lock.json exists for Docker build
        if [[ ! -f "frontend/package-lock.json" ]]; then
          echo "❌ frontend/package-lock.json not found - required for Docker build"
          exit 1
        fi
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontend/Dockerfile ./frontend
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing frontend Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Frontend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "FRONTEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build and push Backend Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: devops-project-backend
        IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
      run: |
        echo "Building backend Docker image..."
        
        # Check if Dockerfile exists
        if [[ ! -f "backend/Dockerfile" ]]; then
          echo "❌ backend/Dockerfile not found"
          exit 1
        fi
        
        # Check if package-lock.json exists for Docker build
        if [[ ! -f "backend/package-lock.json" ]]; then
          echo "❌ backend/package-lock.json not found - required for Docker build"
          exit 1
        fi
        
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/Dockerfile ./backend
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing backend Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Backend image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "BACKEND_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig
      run: |
        echo "Updating kubeconfig for EKS cluster..."
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Verify cluster connection
      run: |
        echo "Verifying cluster connection..."
        kubectl cluster-info
        kubectl get nodes
        echo "✅ Connected to EKS cluster successfully"

    - name: Check Kubernetes manifests exist
      run: |
        if [[ ! -f "k8s/frontend-deployment.yaml" ]]; then
          echo "❌ k8s/frontend-deployment.yaml not found"
          exit 1
        fi
        if [[ ! -f "k8s/backend-deployment.yaml" ]]; then
          echo "❌ k8s/backend-deployment.yaml not found"
          exit 1
        fi
        echo "✅ Kubernetes manifests found"

    - name: Update Kubernetes manifests
      run: |
        echo "Updating Kubernetes manifests with new images..."
        
        # Create backup
        cp k8s/frontend-deployment.yaml k8s/frontend-deployment.yaml.backup
        cp k8s/backend-deployment.yaml k8s/backend-deployment.yaml.backup
        
        # Update frontend deployment with new image
        sed -i "s|REPLACE_WITH_FRONTEND_IMAGE_URL|${{ env.FRONTEND_IMAGE }}|g" k8s/frontend-deployment.yaml
        
        # Update backend deployment with new image  
        sed -i "s|REPLACE_WITH_BACKEND_IMAGE_URL|${{ env.BACKEND_IMAGE }}|g" k8s/backend-deployment.yaml
        
        echo "✅ Manifests updated successfully"

    - name: Deploy to EKS
      run: |
        echo "Deploying to EKS cluster..."
        
        # Apply configurations
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        
        # Wait for deployments to be ready
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/backend-deployment --timeout=300s
        kubectl rollout status deployment/frontend-deployment --timeout=300s
        
        echo "✅ Deployment completed successfully!"

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        kubectl get pods -l app=backend
        kubectl get pods -l app=frontend
        kubectl get services
        
        # Get LoadBalancer URL
        echo "Getting LoadBalancer URL..."
        kubectl get service frontend-service

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        
        # Wait for LoadBalancer to be ready
        echo "Waiting for LoadBalancer to be ready..."
        sleep 60
        
        # Get LoadBalancer URL
        FRONTEND_URL=$(kubectl get service frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ ! -z "$FRONTEND_URL" ]; then
          echo "Testing frontend at: http://$FRONTEND_URL"
          
          # Test if frontend loads (with timeout)
          if timeout 30 curl -f "http://$FRONTEND_URL" > /dev/null 2>&1; then
            echo "✅ Frontend smoke test passed"
          else
            echo "⚠️ Frontend smoke test failed, but deployment completed"
          fi
        else
          echo "⚠️ LoadBalancer URL not available yet, but deployment completed"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
    - name: Notify Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        # Add Slack/Discord/Email notification here

    - name: Notify Failure
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Discord/Email notification here
